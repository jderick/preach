PReach : A distributed model checker for Murphi

PReach was developed and is owned by the formal verification team on Larabee2
(in collaboration with the University of British Columbia).
Since we are a product team and not a tools team, we cannot make any hard
gaurantees of support.  That said, we want to see PReach used by others and
will do our best to be supportive.

A public release under the BSD license is pending.  Currently, we ask that 
PReach is not forwarded (even within Intel) or modified without our approval.  
Please report any bugs or problems you may encounter.

Jesse Bingham jesse.d.bingham@intel.com
John Erickson john.erickson@intel.com



Setup & Compiling Preach.............................................................

PReach requires Erlang, which can be downloaded here:
www.erlang.org/download.html
Or if you are within Intel, you might be able to use the path in the setup file.

Edit the defs of PREACH_ROOT and PREACH_TEMP in ./setup apprpriately; these
should be the absolute paths to the directoy where the preach sources live
and the directory where preach will create the trace file and diskq
during runtime, respectively.  Also ERLANG_ROOT should point to an Erlang
installation; within Intel the default value should work. The contents of setup
should then be added to your ~/.cshrc.* file, and sourced:

> source setup


To build preach, simply do:  

> make

To run a test (single-threaded) do:

> cd ./test
> ./test

This runs a short model check on german's protocol, which should take
less than 30 seconds.  The test was successful if you see something this
near the bottom of the output:

----------
REPORT:
	Total of 35159 states visited (this only accurate if no error or in localmode)
...

Running Preach...............................................................

now cd into whatever directory you want to run preach in, which we'll assume 
contains the murphi source file blah.m (we also assume that this directory
is not the same as $PREACH_ROOT) .  Next do

> ln -f -s $PREACH_ROOT/Makefile Makefile
> make blah.so

This should create the blah.so file.  To invoke preach in local mode, do

> lgo blah

Or

> lgo blah > blah.out 

if you want to capture the output in a file

You can run lgo with arguments that will get passed to preach; anything
after -- is passed.  

> lgo blah -- -nosym

For non-local mode using netbatch (the following only applies within Intel), 
first make sure the contents of setup are pasted into your ~/.cshrc.<user> 
file.  Also it is important that a "no suspend" (nosusp) netbatch class is 
used.  The netbatch class is defined near the top of Intel/nbrun.  Once the 
class is set appropriately, you can do:

>nbrun 8 blah

to run blah on 8 nodes.  If you want to specify the name of the run directory, 
do

> nbrun 8 blah -r blah.rundir

which will create a subdir blah.rundir in the current directory wherein (once 
the job is run by netbatch) will contain (among other things) the main 
logfile blah.log.  Without specifying blah.rundir, you will get a run dir named 
something like run.123456789.

You can run nbrun with arguments that will get passed to preach.
You need to use -- to do this

> nbrun 8 blah -r blahdir -- -nosym -m 1000



Running distributed mode without netbatch.......................................

In hosts file:

n1@host1
n2@host2

Then start erl on these nodes:
 
erl -sname n1@host1 -pa ebin
erl -sname n2@host2 -pa ebin

Then start erl on root:

erl -sname foo -pa ebin -run preach run -model test1

Note that n1 and n2 will still be running erlang; you need to kill them yourself
when you are done using them.  You can run multiple model runs during their tenure.

Caveats........................................................................

* Preach (or perhaps Erlang) has an outstanding bug where occastionally it will
  die immediately after being launched with the following message:

   {"init terminating in do_boot",{badarg,[{murphi_interface,call_port,1},
      {murphi_interface,startstates,0},{preach,start,1},{proc_lib,init_ack,1}]}}

  this happens nondeterministically; if you see it simply rerunning preach
  will typically solve the problem.

* the lgo script currently deletes files matching $PREACH_TEMP/*$USER* before
  launching preach.  So this means it will destructively interfere with any
  running programs (including other preach instances) that use such files.
  we should probably fix this.




Preach Command Line Arguments.....................................................

(these args can be passed to lgo after the model)

-nosym      turns off symmetry reduction, which is on by default 
            (note this is murphi symmetry reduction algorithm #3)

-ndl        turns off deadlock detection, which is on by default

-bob N1     back-off kicks in whenever a node's erlang runtime message queue grows
            beyond N messages long.  By default back-off is off.  Having back-off
            set too high (or off) can lead to nodes spacing out for large
            models.  Having it too low can lead to preach deadlocking.
            irrelevent if in localmode.

-unbob N2   un-back-off when in back-off mode and message queue shrinks to 
            N messages.  Defaults to N1/2 if -bob N1 is give, but -unbob is not.
            irrelevent if in localmode or if -bob N1 not given.

-m N3       make the murphi hash table at each node use N3 Megabytes.
            If not given, this defaults to 1024 (1 GB).

-pr N4      print profiling information every N4 states.  default is 10000



Contacts.................................................................

* Jesse Bingham jesse.d.bingham@intel.com
* John Erickson john.erickson@intel.com


 