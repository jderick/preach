PReach : A distributed model checker for Murphi

PReach was developed and is owned by the formal verification team on Larabee2
(in collaboration with the University of British Columbia).
Since we are a product team and not a tools team, we cannot make any hard
gaurantees of support.  That said, we want to see PReach used by others and
will do our best to be supportive.

A public release under the BSD license is pending.  Currently, we ask that 
PReach is not forwarded (even within Intel) or modified without our approval.  
Please report any bugs or problems you may encounter.

Jesse Bingham jesse.d.bingham@intel.com
John Erickson john.erickson@intel.com



Setup & Compiling Preach.............................................................

PReach requires Erlang, which can be downloaded here:
www.erlang.org/download.html
Or if you are within Intel, you might be able to use the path in the setup file.

Edit the defs of PREACH_ROOT and PREACH_TEMP in ./setup apprpriately; these
should be the absolute paths to the directoy where the preach sources live
and the directory where preach will create the trace file and diskq
during runtime, respectively.  Also ERLANG_ROOT should point to an Erlang
installation; within Intel the default value should work. The contents of setup
should then be added to your ~/.cshrc.* file, and sourced:

> source setup


To build preach, simply do:  

> make

To run a test (single-threaded) do:

> cd ./test
> ./test

This runs a short model check on german's protocol, which should take
less than 30 seconds.  The test was successful if you see something this
near the bottom of the output:

----------
REPORT:
	Total of 35159 states visited (this only accurate if no error or in localmode)
...

Running Preach...............................................................

now cd into whatever directory you want to run preach in, which we'll assume 
contains the murphi source file blah.m (we also assume that this directory
is not the same as $PREACH_ROOT) .  Next do

> ln -f -s $PREACH_ROOT/Makefile Makefile
> make blah.so

This should create the blah.so file.  To invoke preach in local mode, do

> lgo blah

You can run lgo with arguments that will get passed to preach; anything
after -- is passed.  

> lgo blah -- -nosym

For non-local mode first make sure the contents of setup are pasted
into your ~/.cshrc.<user> file.  Populate a "hosts" file with the
names of node@host in this form:

n1@host7436
n2@host7436
n3@host7436
n4@host7436
n1@host7435
n2@host7435
n3@host7435
n4@host7435

Then run 

erl  -rsh ssh -sname foo -pa $PREACH_ROOT  -run preach run -model blah

Caveats........................................................................

* Preach (or perhaps Erlang) has an outstanding bug where occastionally it will
  die immediately after being launched with the following message:

   {"init terminating in do_boot",{badarg,[{murphi_interface,call_port,1},
      {murphi_interface,startstates,0},{preach,start,1},{proc_lib,init_ack,1}]}}

  this happens nondeterministically; if you see it simply rerunning preach
  will typically solve the problem.

* the lgo script currently deletes files matching $PREACH_TEMP/*$USER* before
  launching preach.  So this means it will destructively interfere with any
  running programs (including other preach instances) that use such files.
  we should probably fix this.




Preach Command Line Arguments.....................................................

(these args can be passed to lgo after the model)

-nosym      turns off symmetry reduction, which is on by default 
            (note this is murphi symmetry reduction algorithm #3)

-ndl        turns off deadlock detection, which is on by default

-bob N1     back-off kicks in whenever a node's erlang runtime message queue grows
            beyond N messages long.  By default back-off is off.  Having back-off
            set too high (or off) can lead to nodes spacing out for large
            models.  Having it too low can lead to preach deadlocking.
            irrelevent if in localmode.

-unbob N2   un-back-off when in back-off mode and message queue shrinks to 
            N messages.  Defaults to N1/2 if -bob N1 is give, but -unbob is not.
            irrelevent if in localmode or if -bob N1 not given.

-m N3       make the murphi hash table at each node use N3 Megabytes.
            If not given, this defaults to 1024 (1 GB).

-pr N4      print profiling information every N4 states.  default is 10000



Contacts.................................................................

* Jesse Bingham jesse.d.bingham@intel.com
* John Erickson john.erickson@intel.com


 