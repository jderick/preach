IMPORTANT NOTE:

THIS IS THE DEVELOPEMENT SNAPSHOT OF PREACH.  MOST USERS SHOULD USE THE 
STABLE VERSION FOUND IN ../release-1.0.  THANKS!!!


PReach : A distributed model checker for Murphi

PReach was developed and is owned by a formal verification team at Intel
in collaboration with Brad Bingham and Flavio De Paula at 
the University of British Columbia.

Jesse Bingham jesse.d.bingham@intel.com
John Erickson john.erickson@intel.com



Setup & Compiling Preach.............................................................

PReach requires Erlang, which can be downloaded here:
www.erlang.org/download.html

We are using version otp_src_R13B02-1.  We cannot guarantee
compatibility with other versions.

Or if you are within Intel, you might be able to use the path in the setup file.

Edit the defs of PREACH_ROOT and PREACH_TEMP in ./setup appropriately; these
should be the absolute paths to the directory where the preach sources live
and the directory where preach will create the trace file and diskq
during runtime, respectively.  Also ERLANG_PREFIX should point to an Erlang
installation; see the setup file for more details.  The contents of setup
should then be added to your ~/.cshrc.* file, and sourced:

> source setup


To build preach, simply do:  

> make

To run a test (single-threaded) do:

> cd ./test
> ./test

This runs a short model check on Peterson's protocol, which should take
less than 30 seconds.  The test was successful if you see something this
near the bottom of the output:

----------
VERIFICATION SUCCESSFUL:
	Total of 35159 states visited (this only accurate if no error or in localmode)
...

Running Preach...............................................................

now cd into whatever directory you want to run preach in, which we'll assume 
contains the murphi source file blah.m (we also assume that this directory
is not the same as $PREACH_ROOT) .  Next do

> ln -f -s $PREACH_ROOT/Makefile Makefile
> make blah.so

This should create the blah.so file.  To invoke preach in local mode, do

> lgo blah

You can run lgo with arguments that will get passed to preach; anything
after -- is passed.  

> lgo blah -- -nosym

For non-local mode first make sure the contents of setup are pasted
into your ~/.cshrc.<user> file.  Populate a "hosts" file with the
names of node@host in this form:

n1@machine1
n2@machine1
n3@machine1
n4@machine1
n1@machine2
n2@machine2
n3@machine2
n4@machine2

Here machine1 and machine2 are placeholders for real machine domain names, 
while n1, n2,.. should literally appear in the host file when multiple compute
nodes are to be run on the same host.

Next, login to the hosts in this file to make sure you can ssh uninteractively

Then run 

erl  -rsh ssh -sname foo -pa $PREACH_ROOT  -run preach run -model blah

Running with Netbatch inside Intel.............................................

Make sure you source your setup file from within your ~/.cshrc.<user> 
file.  Also it is important that a "no suspend" (nosusp) netbatch class is 
used.  The netbatch class is defined in your setup file.  Once the 
class is set appropriately, you can do:

>nbrun 8 blah

to run blah on 8 nodes.  If you want to specify the name of the run directory, 
do

> nbrun 8 blah -r blah.rundir

which will create a subdir blah.rundir in the current directory wherein (once 
the job is run by netbatch) will contain (among other things) the main 
logfile blah.log.  Without specifying blah.rundir, you will get a run dir named 
something like run.123456789.

You can run nbrun with arguments that will get passed to preach.
You need to use -- to do this

> nbrun 8 blah -r blahdir -- -nosym -m 1000



Caveats........................................................................

* Preach (or perhaps Erlang) has an outstanding bug where occasionally it will
  die immediately after being launched with the following message:

   {"init terminating in do_boot",{badarg,[{murphi_interface,call_port,1},
      {murphi_interface,startstates,0},{preach,start,1},{proc_lib,init_ack,1}]}}

  this happens non-deterministically; if you see it simply rerunning preach
  will typically solve the problem.

* the lgo script currently deletes files matching $PREACH_TEMP/*$USER* before
  launching preach.  So this means it will destructively interfere with any
  running programs (including other preach instances) that use such files.
  we should probably fix this.

* Running with (exactly) 2 threads that are both on one machine seems to 
  sometimes cause problems


Preach Command Line Arguments.....................................................

(these args can be passed to lgo after the model)

-nosym      turns off symmetry reduction, which is on by default 
            (note this is murphi symmetry reduction algorithm #3)

-ndl        turns off deadlock detection, which is on by default

-bob N1     back-off kicks in whenever a node's erlang runtime message queue grows
            beyond N messages long.  By default N1 = 10,000.  Having back-off
            set too high (or off) can lead to nodes spacing out for large
            models.  Having it too low can lead to too unnecessary performance
            degradation.  irrelevant if in localmode.  to turn back-off off,
            use N1 = 0.

-unbob N2   un-back-off when in back-off mode and message queue shrinks to 
            N messages.  Defaults to N1/10.  irrelevant if in localmode.

-m N3       make the murphi hash table at each node use N3 Megabytes.
            If not given, this defaults to 1024 (1 GB).

-pr N4      each worker node prints profiling information every N4 seconds.  
            default is 5.

-lbr N5     Using load balancing, which means whenever a worker node's
            work queue is empty, it is sent N5 percent of the states from
            the peer worker with the longest work queue.  By default
            N5=0, which turns off the load balancing mechanism.  
            Typically we use 50 for this parameter.

-seed S     By changing S, once can change the uniform state ownership
            function to a different (but still presumably random
            and uniform) function.  


Utilities.................................................................

There is a perl script Intel/plotlog that uses gnuplot to create plots
of work queue lengths, hash table state counts, expanded state counts,
etc., using info from Preach log files.  See the comment at the top of the 
script for usage.


Contacts.................................................................

* Jesse Bingham jesse.d.bingham@intel.com
* John Erickson john.erickson@intel.com


 
